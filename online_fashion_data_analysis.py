# -*- coding: utf-8 -*-
"""fashion_forensics.ipynb

Automatically generated by Colaboratory.

# DATA WRANGLING

## Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_columns', None)
plt.rc('axes', grid=True)


"""## Gathering Data

### Customers
"""

customers_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/customers.csv')
customers_df.head()

"""### Orders"""

orders_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/orders.csv')
orders_df.head()

"""### Product"""

product_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/products.csv')
product_df.head()

"""### Sales"""

sales_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/sales.csv')
sales_df.head()

"""## Assessing Data

### Customers
"""

customers_df.info()

customers_df.isnull().sum()



print('Number of duplicates in customer data: ', customers_df.duplicated().sum())

customers_df.describe()


### Orders


orders_df.info()


print('Number of duplicates in order data: ', orders_df.duplicated().sum())

orders_df.describe()


### Product


product_df.info()

print('Number of duplicates in product data: ', product_df.duplicated().sum())

product_df.describe()

"""### Sales"""

sales_df.info()

sales_df.isnull().sum()



print('Number of duplicates in sale data: ', sales_df.duplicated().sum())

sales_df.describe()


## Cleaning Data

### Customers

#### Drop duplicate data


customers_df.drop_duplicates(inplace=True)

print('Number of duplicates in customer data: ', customers_df.duplicated().sum())

"""#### Handling missing values"""


customers_df[customers_df.gender.isnull()]


customers_df.gender.value_counts()

customers_df.gender.fillna(value='Prefer not to say', inplace=True)

customers_df.isnull().sum()

customers_df.gender.value_counts()

"""#### Handling inaccurate values"""

customers_df[customers_df.age == customers_df.age.max()]



customers_df.age.replace(customers_df.age.max(), 70, inplace=True)

customers_df[customers_df.age == customers_df.age.max()]



customers_df.age.replace(customers_df.age.max(), 50, inplace=True)

customers_df[customers_df.age == customers_df.age.max()]

customers_df.describe()


### Orders



datetime_columns = ['order_date', 'delivery_date']

for column in datetime_columns:
    orders_df[column] = pd.to_datetime(orders_df[column])

orders_df.info()

### Product



product_df.drop_duplicates(inplace=True)

print('Number of duplicates in product data: ', product_df.duplicated().sum())

### Sales


sales_df[sales_df.total_price.isnull()]

sales_df.head(3)


sales_df['total_price'] = sales_df['price_per_unit'] * sales_df['quantity']

sales_df.isnull().sum()

sales_df[sales_df['sales_id'] == 121]

# EXPLORATORY DATA ANALYSIS

## Customers


customers_df.describe(include='all')

customers_df.groupby(by='gender').agg({
    'customer_id': 'nunique',
    'age': ['max', 'min', 'mean', 'std']
})

customers_df.groupby(by='city').customer_id.nunique().sort_values(ascending=False)

customers_df.groupby(by='state').customer_id.nunique().sort_values(ascending=False)


## Orders


orders_df.head(2)


delivery_time = orders_df['delivery_date'] - orders_df['order_date']
delivery_time

delivery_time = delivery_time.apply(lambda x: x.total_seconds())
delivery_time


orders_df['delivery_time'] = round(delivery_time/86_400)

orders_df.head(2)

orders_df.describe(include='all')



customer_id_in_orders_df = orders_df.customer_id.tolist()
customers_df['status'] = customers_df['customer_id'].apply(
    lambda x: 'Active' if x in customer_id_in_orders_df else 'Non Active'
)
customers_df.sample(5)

customers_df.groupby(by='status').customer_id.count()


### Merge

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how='left',
    left_on='customer_id',
    right_on='customer_id'
)
orders_customers_df.head()

"""### Number of orders by city"""

orders_customers_df.groupby(by='city').order_id.nunique().sort_values(ascending=False).reset_index().head(10)


orders_customers_df[orders_customers_df['city'] == 'Jordanside']

"""### Number of orders by state"""

orders_customers_df.groupby(by='state').order_id.nunique().sort_values(ascending=False).reset_index()



### Number of orders by gender


orders_customers_df.groupby(by='gender').order_id.nunique().sort_values(ascending=False).reset_index()



orders_customers_df['age_group'] = orders_customers_df.age.apply(
    lambda x: 'Youth' if x <= 24 else (
        'Seniors' if x > 64 else 'Adults'
    )
)

orders_customers_df.groupby(by='age_group').order_id.nunique().sort_values(ascending=False).reset_index()


## Product and Sales


product_df.describe(include='all')



sales_df.describe(include='all')

product_df.sort_values(by='price', ascending=False)



product_df.groupby(by='product_type').agg({
    'product_id': 'nunique',
    'quantity': 'sum',
    'price': ['min', 'max']
})

product_df.groupby(by='product_name').agg({
    'product_id': 'nunique',
    'quantity': 'sum',
    'price': ['min', 'max']
})

### Merge



sales_product_df = pd.merge(
    left=sales_df,
    right=product_df,
    how='left',
    left_on='product_id',
    right_on='product_id'
)
sales_product_df.head()


sales_product_df.groupby(by='product_type').agg({
    'sales_id': 'nunique',
    'quantity_x': 'sum',
    'total_price': 'sum'
})


sales_product_df.groupby(by='product_name').agg({
    'sales_id': 'nunique',
    'quantity_x': 'sum',
    'total_price': 'sum'
}).sort_values(by='total_price', ascending=False)

## Explore all_df Data


all_df = pd.merge(
    left=sales_product_df,
    right=orders_customers_df,
    how='left',
    left_on='order_id',
    right_on='order_id'
)
all_df.head()

all_df.info()

all_df.groupby(by=['state', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})

all_df.groupby(by=['gender', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})


all_df.groupby(by=['age_group', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})



# DATA VISUALIZATION

## 1st Question



monthly_orders_df = all_df.resample(rule='M', on='order_date').agg({
    'order_id': 'nunique',
    'total_price': 'sum'
})
monthly_orders_df

monthly_orders_df.index = monthly_orders_df.index.strftime('%B')
monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df

monthly_orders_df.rename(columns={
    'order_id': 'order_count',
    'total_price': 'revenue'
}, inplace=True)

monthly_orders_df.head()

sns.set_style('darkgrid')
plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df['order_date'],
    monthly_orders_df['order_count'],
    marker='o',
    linewidth=2,
    color='#72BCD4'
)
plt.title('Number of Orders per Month (2021)', fontsize=16)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

for i in range(len(monthly_orders_df)):
    plt.text(
        monthly_orders_df['order_date'][i],
        monthly_orders_df['order_count'][i] + 0.5,
        monthly_orders_df['order_count'][i],
        ha='left',
        va='bottom',
        fontsize=8
    )

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df['order_date'],
    monthly_orders_df['revenue'],
    marker='o',
    linewidth=2,
    color='#72BCD4'
)
plt.title('Total Revenue per Month (2021)', fontsize=16)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

for i in range(len(monthly_orders_df)):
    plt.text(
        monthly_orders_df['order_date'][i],
        monthly_orders_df['revenue'][i] + 500,
        monthly_orders_df['revenue'][i],
        ha='left',
        va='bottom',
        fontsize=8

    )

## 2nd Question


sum_order_items_df = all_df.groupby(by='product_name').quantity_x.sum().sort_values(ascending=False).reset_index()
sum_order_items_df.head(len(sum_order_items_df))

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ['#72BCD4', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3']

# Plot pertama
sns.barplot(
    x='quantity_x',
    y='product_name',
    data=sum_order_items_df.head(5),
    palette=colors,
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title('Best Performing Product', loc='center', fontsize=15)
ax[0].tick_params(axis='y', labelsize=12)

for i in range(len(sum_order_items_df.head(5))):
    ax[0].text(
        sum_order_items_df['quantity_x'].iloc[i] + 4,
        i,
        sum_order_items_df['quantity_x'].iloc[i],
        va='center',
        fontsize=12
    )

# Plot kedua
asc_sum_order = sum_order_items_df.sort_values(
    by='quantity_x', ascending=True
).head(5)

sns.barplot(
    x='quantity_x',
    y='product_name',
    data=asc_sum_order,
    palette=colors,
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position('right')
ax[1].yaxis.tick_right()
ax[1].set_title('Worst Performing Product', loc='center', fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

for i, value in enumerate(asc_sum_order['quantity_x']):
    ax[1].text(
        value + 11,
        i,
        value,
        va='center',
        fontsize=12
    )

plt.suptitle('Best and Worst Performing Product by Number of Sales', fontsize=20)


## 3rd Question


### By gender


bygender_df = all_df.groupby(by='gender').customer_id.nunique().reset_index()
bygender_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

bygender_df

desc_bygender_df = bygender_df.sort_values(by='customer_count', ascending=False)

plt.figure(figsize=(10, 5))

sns.barplot(
    data=desc_bygender_df,
    y='customer_count',
    x='gender',
    palette=colors
)
plt.title('Number of Customer by Gender', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)

for i, value in enumerate(desc_bygender_df['customer_count']):
    plt.text(
        i,
        value + 5,
        value,
        ha='center'
    )

###age


byage_df = all_df.groupby(by='age_group').customer_id.nunique().reset_index()
byage_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

byage_df

plt.figure(figsize=(10, 5))
colors_ = ['#D3D3D3', '#72BCD4', '#D3D3D3']

ax = sns.barplot(
    data=byage_df,
    y='customer_count',
    x='age_group',
    order=['Youth', 'Adults', 'Seniors'],
    palette=colors_
)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                xytext=(0, 1),
                textcoords='offset points',
                ha='center', va='bottom')

plt.title('Number of Customer by Age', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)

### By state

bystate_df = all_df.groupby(by='state').customer_id.nunique().reset_index()
bystate_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

bystate_df

colors_ = ['#72BCD4', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3']
desc_bystate_df = bystate_df.sort_values(by='customer_count', ascending=False)

plt.figure(figsize=(10, 5))
sns.barplot(
    data=desc_bystate_df,
    x='customer_count',
    y='state',
    palette=colors_
)
plt.title('Number of Customer by States', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)

for i, value in enumerate(desc_bystate_df['customer_count']):
    plt.text(
        x=value + 1,
        y=i,
        s=value,
        va='center',
    )


## RFM Analysis


rfm_df = all_df.groupby(by='customer_id', as_index=False).agg({
    'order_date': 'max', # mengambil tanggal order terakhir
    'order_id': 'nunique', # menghitung jumlah order
    'total_price': 'sum' # menghitung jumlah revenue yang dihasilkan
})

rfm_df

rfm_df.columns = ['customer_id', 'max_order_timestamp', 'frequency', 'monetary']
rfm_df.head(2)


rfm_df['max_order_timestamp'] = rfm_df['max_order_timestamp'].dt.date
recent_date = orders_df['order_date'].dt.date.max()
rfm_df['recency'] = rfm_df['max_order_timestamp'].apply(
    lambda x: (recent_date - x).days
)

rfm_df.drop('max_order_timestamp', axis=1, inplace=True)
rfm_df.head()

asc_recency_rfm_df = rfm_df.sort_values(by="recency", ascending=True).head(5)
asc_recency_rfm_df

colors = ['#72BCD4']

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

# Plot pertama
asc_recency_rfm_df = rfm_df.sort_values(by='recency', ascending=True).head(5)
sns.barplot(
    y='recency',
    x='customer_id',
    data=asc_recency_rfm_df,
    palette=colors,
    order=asc_recency_rfm_df['customer_id'],
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title('By Recency (days)', loc='center', fontsize=18, pad=10)
ax[0].tick_params(axis ='x', labelsize=15)

for i, value in enumerate(asc_recency_rfm_df['recency']):
    ax[0].text(
        x=i,
        y=value + 0.02,
        s=value,
        ha='center',
    )

# Plot kedua
desc_frequency_rfm_df = rfm_df.sort_values(by='frequency', ascending=False).head(5)
sns.barplot(
    y='frequency',
    x='customer_id',
    data=desc_frequency_rfm_df,
    palette=colors,
    order=desc_frequency_rfm_df['customer_id'],
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title('By Frequency', loc='center', fontsize=18, pad=10)
ax[1].tick_params(axis='x', labelsize=15)

for i, value in enumerate(desc_frequency_rfm_df['frequency']):
    ax[1].text(
        x=i,
        y=value + 0.1,
        s=value,
        ha='center',
    )

# Plot ketiga
desc_monetary_rfm_df = rfm_df.sort_values(by='monetary', ascending=False).head(5)
sns.barplot(
    y='monetary',
    x='customer_id',
    data=desc_monetary_rfm_df,
    palette=colors,
    order=desc_monetary_rfm_df['customer_id'],
    ax=ax[2]
)
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title('By Monetary', loc='center', fontsize=18, pad=10)
ax[2].tick_params(axis='x', labelsize=15)

for i, value in enumerate(desc_monetary_rfm_df['monetary']):
    ax[2].text(
        x=i,
        y=value + 100,
        s=value,
        ha='center',
    )

plt.suptitle('Best Customer Based on RFM Parameters (customer_id)',
             fontsize=20, y=1);


## Save Data Files


all_df.to_csv('all_data.csv', index=False)
